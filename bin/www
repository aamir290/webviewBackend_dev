#!/usr/bin/env node

/**
 * Module dependencies.
 */

//Includes

// Class
const Server = require('../src/infrastructure/Server');
const Application = require('../src/infrastructure/Application');

//Configuration
const config = require('../config/config.js');

//Load use case
const useCaseContainer = {};
useCaseContainer.getAllCategoriesUsecase = require('../src/usecases/GetRootCategoriesUseCase');

//Functions/utils/middleware
const logger = require('../src/infrastructure/logging/logger')(config);
const requestLoggerFile = require('../src/infrastructure/logging/requestLoggerToFileMiddleware')(config);
const requestLogger = require('../src/infrastructure/logging/requestLoggerMiddleware');

//Initialize components

const ApiRouter = require('../src/infrastructure/routes/apiRouter');
const apiRouter = new ApiRouter(useCaseContainer, logger);
const mainRouter = require('../src/infrastructure/routes/router')(config, requestLoggerFile, requestLogger, apiRouter.apiRouter);

const currentServer = new Server(mainRouter, config, logger);
const searchDirectoryApplication = new Application(currentServer);

logger.debug('%o', config);

//Start Application
searchDirectoryApplication
  .start()
  .then(() => {
    logger.info('Success Launch');
  })
  .catch((error) => {
    logger.error(`Error : ${error}`);
  });


// var app = require('../app');
// var debug = require('debug')('searchdirectoryapi:server');
// var http = require('http');
//
// /**
//  * Get port from environment and store in Express.
//  */
//
// var port = normalizePort(process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || '3000');
// app.set('port', port);
//
// /**
//  * Create HTTP server.
//  */
//
// var server = http.createServer(app);
//
// /**
//  * Listen on provided port, on all network interfaces.
//  */
//
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);
//
// /**
//  * Normalize a port into a number, string, or false.
//  */
//
// function normalizePort(val) {
//   var port = parseInt(val, 10);
//
//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }
//
//   if (port >= 0) {
//     // port number
//     return port;
//   }
//
//   return false;
// }
//
// /**
//  * Event listener for HTTP server "error" event.
//  */
//
// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }
//
//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;
//
//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//   case 'EACCES':
//     debug.error(bind + ' requires elevated privileges');
//     process.exit(1);
//     break;
//   case 'EADDRINUSE':
//     debug.error(bind + ' is already in use');
//     process.exit(1);
//     break;
//   default:
//     throw error;
//   }
// }
//
// /**
//  * Event listener for HTTP server "listening" event.
//  */
//
// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
